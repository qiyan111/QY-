// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: slo_service.proto

package slosv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TenantCreditService_GetTenantCredit_FullMethodName = "/api.slo.TenantCreditService/GetTenantCredit"
	TenantCreditService_RecordViolation_FullMethodName = "/api.slo.TenantCreditService/RecordViolation"
	TenantCreditService_UpdateTenantSLO_FullMethodName = "/api.slo.TenantCreditService/UpdateTenantSLO"
)

// TenantCreditServiceClient is the client API for TenantCreditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantCreditServiceClient interface {
	GetTenantCredit(ctx context.Context, in *TenantCreditRequest, opts ...grpc.CallOption) (*TenantCredit, error)
	RecordViolation(ctx context.Context, in *ViolationRecord, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTenantSLO(ctx context.Context, in *TenantSLO, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tenantCreditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantCreditServiceClient(cc grpc.ClientConnInterface) TenantCreditServiceClient {
	return &tenantCreditServiceClient{cc}
}

func (c *tenantCreditServiceClient) GetTenantCredit(ctx context.Context, in *TenantCreditRequest, opts ...grpc.CallOption) (*TenantCredit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantCredit)
	err := c.cc.Invoke(ctx, TenantCreditService_GetTenantCredit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantCreditServiceClient) RecordViolation(ctx context.Context, in *ViolationRecord, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TenantCreditService_RecordViolation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantCreditServiceClient) UpdateTenantSLO(ctx context.Context, in *TenantSLO, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TenantCreditService_UpdateTenantSLO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantCreditServiceServer is the server API for TenantCreditService service.
// All implementations must embed UnimplementedTenantCreditServiceServer
// for forward compatibility.
type TenantCreditServiceServer interface {
	GetTenantCredit(context.Context, *TenantCreditRequest) (*TenantCredit, error)
	RecordViolation(context.Context, *ViolationRecord) (*emptypb.Empty, error)
	UpdateTenantSLO(context.Context, *TenantSLO) (*emptypb.Empty, error)
	mustEmbedUnimplementedTenantCreditServiceServer()
}

// UnimplementedTenantCreditServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTenantCreditServiceServer struct{}

func (UnimplementedTenantCreditServiceServer) GetTenantCredit(context.Context, *TenantCreditRequest) (*TenantCredit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantCredit not implemented")
}
func (UnimplementedTenantCreditServiceServer) RecordViolation(context.Context, *ViolationRecord) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordViolation not implemented")
}
func (UnimplementedTenantCreditServiceServer) UpdateTenantSLO(context.Context, *TenantSLO) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantSLO not implemented")
}
func (UnimplementedTenantCreditServiceServer) mustEmbedUnimplementedTenantCreditServiceServer() {}
func (UnimplementedTenantCreditServiceServer) testEmbeddedByValue()                             {}

// UnsafeTenantCreditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantCreditServiceServer will
// result in compilation errors.
type UnsafeTenantCreditServiceServer interface {
	mustEmbedUnimplementedTenantCreditServiceServer()
}

func RegisterTenantCreditServiceServer(s grpc.ServiceRegistrar, srv TenantCreditServiceServer) {
	// If the following call pancis, it indicates UnimplementedTenantCreditServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TenantCreditService_ServiceDesc, srv)
}

func _TenantCreditService_GetTenantCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantCreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantCreditServiceServer).GetTenantCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantCreditService_GetTenantCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantCreditServiceServer).GetTenantCredit(ctx, req.(*TenantCreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantCreditService_RecordViolation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViolationRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantCreditServiceServer).RecordViolation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantCreditService_RecordViolation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantCreditServiceServer).RecordViolation(ctx, req.(*ViolationRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantCreditService_UpdateTenantSLO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantSLO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantCreditServiceServer).UpdateTenantSLO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantCreditService_UpdateTenantSLO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantCreditServiceServer).UpdateTenantSLO(ctx, req.(*TenantSLO))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantCreditService_ServiceDesc is the grpc.ServiceDesc for TenantCreditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantCreditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.slo.TenantCreditService",
	HandlerType: (*TenantCreditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenantCredit",
			Handler:    _TenantCreditService_GetTenantCredit_Handler,
		},
		{
			MethodName: "RecordViolation",
			Handler:    _TenantCreditService_RecordViolation_Handler,
		},
		{
			MethodName: "UpdateTenantSLO",
			Handler:    _TenantCreditService_UpdateTenantSLO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slo_service.proto",
}
