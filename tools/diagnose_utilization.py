#!/usr/bin/env python3
"""
诊断利用率问题的工具
"""
import sys
import os

print("=" * 80)
print("利用率诊断工具")
print("=" * 80)
print()

print("请提供以下信息（从您的运行日志中）：")
print()
print("1. 调度间隔设置")
print("   查找包含 '[事件驱动] 调度间隔' 的行")
print("   示例输出：")
print("   [事件驱动] 调度间隔=3秒 (任务中位时长=15秒)")
print()

print("2. 事件驱动统计")
print("   查找包含 '[事件驱动统计]' 的部分")
print("   示例输出：")
print("   [事件驱动统计]")
print("     调度轮次: 100")
print("     已调度: 1000, 失败: 0")
print("     采样次数: 100")
print("     过程平均利用率(请求): 5.0%")
print()

print("3. 任务时长统计")
print("   查找包含 '任务时长统计' 的行")
print("   示例输出：")
print("   任务时长统计: 平均=15秒, 中位数=15秒")
print()

print("=" * 80)
print("快速诊断")
print("=" * 80)
print()

print("如果您看到：")
print()
print("情况 1: 调度间隔=7秒 或更大")
print("  问题：环境变量 BATCH_STEP_SECONDS=3 没有生效")
print("  原因：代码中的 recommended_step 覆盖了环境变量")
print("  解决：修改代码，强制使用环境变量")
print()

print("情况 2: 调度轮次很少（如 < 20）")
print("  问题：调度间隔太大或模拟时间太短")
print("  原因：任务完成后，模拟立即结束")
print("  解决：增加任务数或调整模拟逻辑")
print()

print("情况 3: 采样次数很少（如 < 20）")
print("  问题：采样条件不满足")
print("  原因：可能只在有任务运行时采样")
print("  解决：检查采样逻辑")
print()

print("情况 4: 过程平均利用率本身就是 5%")
print("  问题：事件驱动模拟确实观察到利用率很低")
print("  原因：任务瞬间完成，然后长时间空闲")
print("  分析：这可能是真实情况！")
print()

print("=" * 80)
print("理论计算验证")
print("=" * 80)
print()

print("配置: 1000 任务, 3 节点, BATCH_STEP=3秒, 任务时长=15秒")
print()

print("假设 1: 调度间隔真的是 3 秒")
print("  如果任务需求 25 core，容量 33 core：")
print("  峰值利用率 = 25/33 = 76%")
print("  时间占比 = 15/(15+3) = 83%")
print("  平均利用率 = 76% × 83% = 63%")
print("  实际观察: 5%")
print("  结论: 调度间隔可能不是 3 秒，或者有其他问题")
print()

print("假设 2: 调度间隔实际是 60 秒")
print("  时间占比 = 15/(15+60) = 20%")
print("  平均利用率 = 76% × 20% = 15%")
print("  实际观察: 5%")
print("  结论: 还是不够低，可能任务需求更少")
print()

print("假设 3: 任务需求实际只有 5 core")
print("  峰值利用率 = 5/33 = 15%")
print("  调度间隔 60 秒：")
print("  平均利用率 = 15% × 20% = 3%")
print("  实际观察: 5%")
print("  结论: 接近！可能是这种情况")
print()

print("=" * 80)
print("验证步骤")
print("=" * 80)
print()

print("步骤 1: 确认环境变量生效")
print("  在 Python 脚本开头添加:")
print("  import os")
print("  print(f'BATCH_STEP_SECONDS = {os.getenv(\"BATCH_STEP_SECONDS\", \"未设置\")}')")
print()

print("步骤 2: 检查实际调度间隔")
print("  在日志中查找 '[事件驱动] 调度间隔=XX秒'")
print("  如果看到的不是 3 秒，说明环境变量没起作用")
print()

print("步骤 3: 添加调试输出")
print("  在 run_with_events.py 中添加:")
print("  print(f'[DEBUG] batch_step_seconds = {batch_step_seconds}')")
print("  print(f'[DEBUG] 采样触发: util={avg_util_now:.2%}, running_tasks={len(running_tasks)}')")
print()

print("=" * 80)
print("临时解决方案")
print("=" * 80)
print()

print("如果环境变量不生效，可以直接修改代码：")
print()
print("文件: tools/run_complete_comparison.py")
print("位置: 约第 524 行")
print()
print("修改前:")
print("  recommended_step = max(1, min(median_duration // 2, 60))")
print("  batch_step = int(os.getenv('BATCH_STEP_SECONDS', str(recommended_step)))")
print()
print("修改后:")
print("  # 强制使用 3 秒调度间隔")
print("  batch_step = 3")
print("  print(f'  [强制] 调度间隔={batch_step}秒')")
print()

print("=" * 80)
print()
print("请将您的日志输出发送给我，我可以帮您精确诊断问题！")
print()
print("保存日志的命令:")
print("  export BATCH_STEP_SECONDS=3")
print("  python tools/run_complete_comparison.py ./data 1000 3 2>&1 | tee debug.log")
print()
print("=" * 80)
